name: Build

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  release:
    types: [created]

jobs:
  cs-build:
    runs-on: ubuntu-latest
    outputs:
      # Version of the package produced. This is set by the
      # `EmitPackageVersionToGitHubActionVariable` MSBuild task that runs
      # before packing.
      nuget-package-version: ${{ steps.pack.outputs.nuget-package-version }}
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.101
    - name: Install dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --configuration Release --no-restore
    - name: Test
      run: dotnet test --configuration Release --no-restore --verbosity normal
    - name: Pack
      id: pack
      run: dotnet pack --configuration Release --no-restore
    - name: Upload packages
      uses: actions/upload-artifact@v2
      with:
        name: nuget-packages
        path: pack/Release/netcoreapp3.1/

  integration-tests:
    needs: cs-build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
    - name: Download packages
      uses: actions/download-artifact@v2
      with:
        name: nuget-packages
        path: pack/
    - name: Test (Windows)
      if: ${{ runner.os == 'Windows' }}
      run: |
        Set-StrictMode -Version Latest
        Set-PsDebug -Trace 1
        $dnjcPath = & tests\integration-tests\windows\Install-Dnjc.ps1 -SourceDir .\pack\ -Version '${{ needs.cs-build.outputs.nuget-package-version }}'
        & tests\integration-tests\windows\Test-Dnjc.ps1 -DnjcPath $dnjcPath
      shell: pwsh
    - name: Test (Unixy)
      if: ${{ runner.os != 'Windows' }}
      run: |
          set -efu
          dnjc_path=$(./tests/integration-tests/unixy/install-dnjc.sh -s ./pack -v '${{ needs.cs-build.outputs.nuget-package-version }}')
          ./tests/integration-tests/unixy/test-dnjc.sh -d "${dnjc_path}"

  emacs-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install emacs
      run: sudo apt-get install --no-install-recommends --yes emacs-nox
    - name: emacs version
      run: emacs --version
    - name: Build emacs library
      run: cd emacs && make

  website-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install minify
      run: sudo apt-get install --no-install-recommends --yes minify
    - id: install-pandoc
      name: Install Pandoc
      run: |
        set -efu
        pandoc_install_location=$(website/install_pandoc.sh)
        echo "::set-output name=pandoc-install-location::${pandoc_install_location}"
    - name: Build website
      run: cd website && make PANDOC=${{ steps.install-pandoc.outputs.pandoc-install-location }}
    - name: Upload generated website
      uses: actions/upload-artifact@v2
      with:
        name: website
        path: website/*.html

  publish-github:
    if: ${{ github.event_name == 'push' || github.event_name == 'release' }}
    needs: [cs-build, integration-tests]
    runs-on: ubuntu-latest
    steps:
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.101
        source-url: https://nuget.pkg.github.com/chwarr/index.json
      env:
        NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
    - name: Download packages
      uses: actions/download-artifact@v2
      with:
        name: nuget-packages
        path: pack/
    - name: Push
      run: dotnet nuget push --skip-duplicate "pack/*.nupkg"
